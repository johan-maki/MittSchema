// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { mockSupabase, mockAuth } from '@/services/mockSupabaseService';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://smblztfikisrnqfjmyqj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtYmx6dGZpa2lzcm5xZmpteXFqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk4MjY4MjgsImV4cCI6MjA1NTQwMjgyOH0.yzDHEqCpNAThHKy1hNwXEUpSfgrkSchpmPuES27j8BY";

// Check if we're in development only after window is available
function isDevelopmentMode(): boolean {
  if (typeof window === 'undefined') {
    return false; // Server-side or build time
  }
  return import.meta.env.DEV && (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1');
}

// Always create real client
let realSupabase: any = null;
try {
  if (SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY) {
    realSupabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
    console.log('‚úÖ Supabase client initialized successfully');
  } else {
    console.warn('‚ö†Ô∏è Supabase credentials missing, using mock client');
  }
} catch (error) {
  console.error('‚ùå Failed to initialize Supabase client:', error);
}

// Create mock client structure
const mockClient = {
  from: mockSupabase.from.bind(mockSupabase),
  auth: mockAuth,
  channel: () => ({ 
    on: () => ({ subscribe: () => ({ unsubscribe: () => {} }) }),
    subscribe: () => ({ unsubscribe: () => {} })
  }),
  removeChannel: () => {},
  storage: {
    from: () => ({
      upload: () => Promise.resolve({ data: null, error: null }),
      download: () => Promise.resolve({ data: null, error: null }),
      remove: () => Promise.resolve({ data: null, error: null })
    })
  },
  rpc: () => Promise.resolve({ data: null, error: null })
};

// Create fallback client for when real client fails
const fallbackClient = {
  from: () => ({ select: () => Promise.resolve({ data: [], error: null }) }),
  auth: { getUser: () => Promise.resolve({ data: { user: null }, error: null }) },
  channel: () => ({ on: () => ({ subscribe: () => ({ unsubscribe: () => {} }) }) }),
  removeChannel: () => {},
  storage: { from: () => ({}) },
  rpc: () => Promise.resolve({ data: null, error: null })
};

// Export the appropriate client
let exportedClient;

if (isDevelopmentMode()) {
  console.log('üöÄ Using MOCK Supabase service for development');
  exportedClient = mockClient;
} else if (realSupabase) {
  console.log('üîó Using REAL Supabase service');
  exportedClient = realSupabase;
} else {
  console.log('‚ö†Ô∏è Using fallback client - check environment variables');
  exportedClient = mockClient; // Use mock client as fallback instead of broken client
}

export const supabase = exportedClient;

// Usage example:
// import { supabase } from "@/integrations/supabase/client";
