// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { mockSupabase, mockAuth } from '@/services/mockSupabaseService';

const SUPABASE_URL = "https://smblztfikisrnqfjmyqj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtYmx6dGZpa2lzcm5xZmpteXFqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk4MjY4MjgsImV4cCI6MjA1NTQwMjgyOH0.yzDHEqCpNAThHKy1hNwXEUpSfgrkSchpmPuES27j8BY";

// Use mock service only in local development mode
const isDevelopment = import.meta.env.DEV && (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1');

let realSupabase: any = null;

// Only create real client in production
if (!isDevelopment) {
  realSupabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
}

export const supabase = isDevelopment ? {
  from: mockSupabase.from.bind(mockSupabase),
  auth: mockAuth,
  // Mock all other methods to prevent network calls
  channel: () => ({ 
    on: () => ({ subscribe: () => ({ unsubscribe: () => {} }) }),
    subscribe: () => ({ unsubscribe: () => {} })
  }),
  removeChannel: () => {},
  storage: {
    from: () => ({
      upload: () => Promise.resolve({ data: null, error: null }),
      download: () => Promise.resolve({ data: null, error: null }),
      remove: () => Promise.resolve({ data: null, error: null })
    })
  },
  // Add any other methods that might be called
  rpc: () => Promise.resolve({ data: null, error: null })
} : realSupabase;

console.log(isDevelopment ? 'ðŸš€ Using MOCK Supabase service for development' : 'ðŸ”— Using REAL Supabase service');

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";