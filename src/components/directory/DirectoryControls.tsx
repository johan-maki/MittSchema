
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { Dialog, DialogContent, DialogTrigger, DialogDescription, DialogTitle } from "@/components/ui/dialog";
import { UserPlus, Trash2, Users, AlertTriangle } from "lucide-react";
import { AddProfileDialog } from "@/components/directory/AddProfileDialog";
import { useDirectory } from "@/contexts/DirectoryContext";
import { useState } from "react";
import { useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { InsertProfile } from "@/types/profile";
import { addProfile, clearDatabase, generateTestData } from "@/services/profileService";

export function DirectoryControls() {
  const { roleFilter, setRoleFilter, searchQuery, setSearchQuery } = useDirectory();
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isClearing, setIsClearing] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [newProfile, setNewProfile] = useState<InsertProfile>({
    id: '',
    first_name: '',
    last_name: '',
    role: '',
    department: '',
    phone: '',
    experience_level: 1
  });
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsProcessing(true);
    
    try {
      console.log("Adding new profile with data:", newProfile);
      
      // Create profile data object without the ID (will be generated by the function)
      const profileData = {
        first_name: newProfile.first_name,
        last_name: newProfile.last_name,
        role: newProfile.role,
        department: newProfile.department || '',
        phone: newProfile.phone || '',
        experience_level: Number(newProfile.experience_level)
      };
      
      // Use the profile service to add the profile
      const addedProfile = await addProfile(profileData);
      
      console.log("Profile added successfully:", addedProfile);
      
      toast({
        title: "Profil tillagd",
        description: `${profileData.first_name} ${profileData.last_name} har lagts till`,
      });
      
      // Reset form
      setNewProfile({
        id: '',
        first_name: '',
        last_name: '',
        role: '',
        department: '',
        phone: '',
        experience_level: 1
      });
      
      // Refresh the profiles list
      await queryClient.invalidateQueries({ queryKey: ['profiles'] });
      await queryClient.invalidateQueries({ queryKey: ['all-employees'] });
      setIsDialogOpen(false);
    } catch (error: unknown) {
      console.error('Error adding profile:', error);
      
      let errorMessage = "Kunde inte lägga till profilen";
      
      // Handle specific errors related to experience_level
      if (error instanceof Error && error.message && (
        error.message.includes("experience_level") || 
        error.message.includes("profiles_experience_level_check")
      )) {
        errorMessage = "Erfarenhetsnivå måste vara mellan 0 och 10 år";
      } else if (error instanceof Error && error.message && error.message.includes("constraint")) {
        errorMessage = "Ett fel uppstod med databasen. Kontrollera att alla fält är korrekt ifyllda.";
      } else if (error instanceof Error && error.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Fel",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const handleClearDatabase = async () => {
    if (!window.confirm('Är du säker på att du vill tömma hela databasen? Detta går inte att ångra.')) {
      return;
    }

    setIsClearing(true);
    try {
      await clearDatabase();
      
      toast({
        title: "Databas tömd",
        description: "Alla anställda har tagits bort från databasen",
      });
      
      // Refresh the profiles list
      await queryClient.invalidateQueries({ queryKey: ['profiles'] });
      await queryClient.invalidateQueries({ queryKey: ['all-employees'] });
    } catch (error: unknown) {
      console.error('Error clearing database:', error);
      toast({
        title: "Fel",
        description: error instanceof Error ? error.message : "Kunde inte tömma databasen",
        variant: "destructive",
      });
    } finally {
      setIsClearing(false);
    }
  };

  const handleGenerateTestData = async (count: number) => {
    setIsGenerating(true);
    try {
      await generateTestData(count);
      
      toast({
        title: "Testdata skapad",
        description: `${count} testanställda har lagts till i databasen`,
      });
      
      // Refresh the profiles list
      await queryClient.invalidateQueries({ queryKey: ['profiles'] });
      await queryClient.invalidateQueries({ queryKey: ['all-employees'] });
    } catch (error: unknown) {
      console.error('Error generating test data:', error);
      toast({
        title: "Fel",
        description: error instanceof Error ? error.message : "Kunde inte skapa testdata",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200/50">
      <div className="flex flex-col gap-4">
        {/* Top row: Search and Filter */}
        <div className="flex flex-col sm:flex-row gap-3 w-full">
          <div className="relative flex-1">
            <Input
              placeholder="Sök personal..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full h-11 pl-4 pr-4 border-slate-300 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500/20 transition-all duration-200"
            />
          </div>
          <Select
            value={roleFilter}
            onValueChange={setRoleFilter}
          >
            <SelectTrigger className="w-full sm:w-[200px] h-11 border-slate-300 rounded-lg shadow-sm focus:border-blue-500 focus:ring-blue-500/20 transition-all duration-200">
              <SelectValue placeholder="Alla roller" />
            </SelectTrigger>
            <SelectContent className="rounded-lg border-slate-300 shadow-lg">
              <SelectItem value="all" className="rounded-md">Alla roller</SelectItem>
              <SelectItem value="Läkare" className="rounded-md">Läkare</SelectItem>
              <SelectItem value="Sjuksköterska" className="rounded-md">Sjuksköterska</SelectItem>
              <SelectItem value="Undersköterska" className="rounded-md">Undersköterska</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Bottom row: Action buttons */}
        <div className="flex flex-wrap gap-3 items-center justify-between">
          {/* Left side: Database management buttons */}
          <div className="flex flex-wrap gap-2">
            <Button 
              onClick={handleClearDatabase}
              disabled={isClearing}
              variant="destructive"
              size="sm"
              className="h-9 px-3"
            >
              {isClearing ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                  Tömmer...
                </>
              ) : (
                <>
                  <Trash2 className="w-4 h-4 mr-2" />
                  Töm databas
                </>
              )}
            </Button>
            
            <Button 
              onClick={() => handleGenerateTestData(3)}
              disabled={isGenerating}
              variant="outline"
              size="sm"
              className="h-9 px-3"
            >
              {isGenerating ? (
                <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2"></div>
              ) : (
                <Users className="w-4 h-4 mr-2" />
              )}
              Testdata (3)
            </Button>
            
            <Button 
              onClick={() => handleGenerateTestData(5)}
              disabled={isGenerating}
              variant="outline"
              size="sm"
              className="h-9 px-3"
            >
              {isGenerating ? (
                <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2"></div>
              ) : (
                <Users className="w-4 h-4 mr-2" />
              )}
              Testdata (5)
            </Button>
            
            <Button 
              onClick={() => handleGenerateTestData(6)}
              disabled={isGenerating}
              variant="outline"
              size="sm"
              className="h-9 px-3"
            >
              {isGenerating ? (
                <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2"></div>
              ) : (
                <Users className="w-4 h-4 mr-2" />
              )}
              Testdata (6)
            </Button>
          </div>

          {/* Right side: Add employee button */}
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button className="h-9 px-4 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium rounded-lg shadow-sm transition-all duration-200 hover:shadow-md">
                <UserPlus className="w-4 h-4 mr-2" />
                Lägg till personal
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-2xl">
              <DialogTitle className="text-xl font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-3">
                <div className="w-8 h-8 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center">
                  <UserPlus className="w-4 h-4 text-green-600 dark:text-green-400" />
                </div>
                Lägg till ny medarbetare
              </DialogTitle>
              <DialogDescription className="text-gray-600 dark:text-gray-400">
                Fyll i informationen nedan för att lägga till en ny medarbetare i systemet.
              </DialogDescription>
              <AddProfileDialog 
                isOpen={isDialogOpen}
                setIsOpen={setIsDialogOpen}
                newProfile={newProfile}
                setNewProfile={setNewProfile}
                onSubmit={handleSubmit}
                isProcessing={isProcessing}
              />
            </DialogContent>
          </Dialog>
        </div>
      </div>
    </div>
  );
}
